import java.util.Iterator;

/**
 * This class represents a sequence generator for a Geometric Sequence Generator
 * This class implements the Iterator<Integer> interface and digit product sequences
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
	private final int SIZE; // The number of elements in this sequence
	//private final int INIT; // The first term in this sequence
	private final int RATIO; // The common ratio for this sequence
	private int next; // The next term in the sequence
	private int generatedCount; // The number of terms generated so far in this sequence
	// It refers also to the order of the next number to be generated by next()
	// method

	/**
	 * constructor Generates a Geometric Sequence
	 * 
	 * @param init   initial value
	 * @param ration common ratio
	 * @param size   number of elements in the sequence
	 */
	public GeometricSequenceGenerator(int init, int ratio, int size) {
		// check for the precondition: size > 0, throw an IllegalArgumentException if
		// this precondition is not satisfied
		if (size <= 0)
			throw new IllegalArgumentException("WARNING: " + "CANNOT create a sequence with size <= zero.");
		// check for the validity of init (>0) and ratio (>0), throw an
		// IllegalArgumentException if these two parameters are not valid
		if (init <= 0 || ratio <= 0)
			throw new IllegalArgumentException("WARNING: The starting element and the common ratio for "
					+ "a geometric progression should be STRICTLY POSITIVE.");

		// set the instance fields
		//this.INIT = init;
		this.RATIO = ratio;
		this.SIZE = size;
		next = init; // initializes next to the first element in this arithmetic progression
		generatedCount = 0;
	}

	/**
	 * Checks if the iteration has a next element in this sequence
	 * 
	 * @return true if the current element in the iteration has a next element in
	 *         this sequence, false otherwise
	 */
	@Override
	public boolean hasNext() {
		// Time Complexity: O(1)
		return generatedCount < SIZE;
	}

	/**
	 * Returns the next element in this Geometric sequence iteration with respect to
	 * the numbers generated so far
	 * 
	 * @return the next element in this iteration
	 */
	@Override
	public Integer next() {
		// Time Complexity: O(1)
		if (!hasNext()) // check if the current element has a next element in this sequence
			return null;
		int current = next; // set the current element to next
		generatedCount++; // increment the number of generated elements so far
		next *= RATIO; // set the next element (adds the common difference to the current number)
		return current; // return the current number as the generated one
	}
}